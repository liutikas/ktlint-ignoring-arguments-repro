/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4/userguide/building_java_projects.html
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.5.31"

    // Apply the java-library plugin for API and implementation separation.
    `java-library`
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("com.google.guava:guava:30.1.1-jre")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api("org.apache.commons:commons-math3:3.6.1")
}

val bundlingAttribute: Attribute<String> =
    Attribute.of(
        "org.gradle.dependency.bundling",
        String::class.java
    )

fun Project.getKtlintConfiguration(): ConfigurableFileCollection {
    return files(
        configurations.findByName("ktlint") ?: configurations.create("ktlint") {
            val dependency = project.dependencies.create("com.pinterest:ktlint:0.46.1")
            dependencies.add(dependency)
            attributes.attribute(bundlingAttribute, "external")
        }
    )
}

abstract class KtlintCheckTask: DefaultTask() {
    @get:Inject
    abstract val execOperations: ExecOperations

    @get:Classpath
    abstract val ktlintClasspath: ConfigurableFileCollection

    @[InputFiles PathSensitive(PathSensitivity.RELATIVE)]
    fun getInputFiles(): FileTree {
        return project.fileTree(project.projectDir)
    }

    @get:Internal
    val projectPath: String = project.path

    @Input
    fun getArgsList(): List<String> {
        val arguments = mutableListOf("--android")
        arguments.add("--disabled_rules")
        arguments.add("final-newline")
        arguments.add("--reporter=plain")
        arguments.add("src/**/*.kt")
        return arguments
    }

    @TaskAction
    fun runCheck() {
        val result = execOperations.javaexec {
            mainClass.set("com.pinterest.ktlint.Main")
            classpath = ktlintClasspath
            args = getArgsList()
            isIgnoreExitValue = true
        }
        if (result.exitValue != 0) {
            println("""

                ********************************************************************************
                FAILED
                ********************************************************************************
                """.trimIndent()
            )
            result.assertNormalExitValue()
        }
    }
}

tasks.register("ktlint", KtlintCheckTask::class.java) {
    ktlintClasspath.from(getKtlintConfiguration())
}